1.	问题的引入
	字符串是计算机应用中最为广泛的处理对象。
	
	并且字符串的组合规则形式是多种多样的，如：
		数字字符串
		email字符串
		IP地址字符串
		。。。
		
	这些都是我们程序设计需要处理的对象，现在的问题是：
		计算机要处理这些字符串，首先要用某种语言(规则)来描述这些字符串。
		--->正则表达式
	
2.	正则表达式	
	正则表达式是用来描述某种规则字符串的表达式。
	
	脱离具体语言的一些规则，但是现在大多数设计语言都实现了或支持正则表达式。
	比如：
		十进制的数字字符串 ---> [0-9]+
	
	正则表达式也叫匹配模式，它是由一组特定含义的字符串组成，通常用于匹配和替换文件。
	
	在正则表达式中的字符，通常分为两种：
		(1)	普通字符
			只能代表自己本身的字符
		
		(2)	元字符
			有特定的含义(不代表自身)的字符
		
			正则表达式中的元字符：
				.		匹配任意单个字符
				[]		字符组。虽然有多个字符组成，但它仍只能匹配单个字符，而字符组能
						够匹配的单个字符，都在[]内列举出来了。
						
						[0123456789abcdefABCDEF]:一个十六进制字符
					
						[]仅能匹配一个[]内列举出来的字符。
					
						[]字符组内也有一个元字符 -
						-在[]内用于连接ASCII连续的字符
						
						练习：
							请用正则表达式描述可以作为C语言标识符的字符
							[a-zA-Z0-9_]
							
				[^]		排除字符组，匹配单个字符，匹配除[]内以外的所有单个字符
						非十进制数字字符
							[^0-9]
							[0-9^]:匹配单个字符0-9和^中的其中一个。
						
				\d		(digtial)匹配单个十进制数字字符
						\d  <--->	[0-9]
					
				\D		匹配单个非十进制数字字符
						\D  <--->	[^0-9]
					
				\w		匹配字母、数字、_
						\w  <--->  	[a-zA-Z0-9_]
				
				\W		匹配非字母、数字、_
						\W  <--->  	[^a-zA-Z0-9_]
		
				\s		匹配空白字符
						\s 	<--->	[\f\n\t\r\v]
					
				
				\S		匹配非空白字符
						\S	<--->	[^\f\n\t\r\v]
						
				代表(匹配)多个字符		
				+		匹配一个或多个先前字符(模式)
						如：	
							09+
							代表以0开头，后面有1个9或者多个9的字符
							如：
								“09” “099” “0999”......
								
							[0-9]+
							代表多个范围在0到9的字符
							如：	
								“0” “22” “666666666666666666666666666666” “127837613163126723675”
							
	
				*		匹配0个或多个先前字符	
						如：
							09*
							代表以0开头，后面有0个9或者多个9的字符
							如：
								“0” “09” “0999”。。。。
							
							[0-9]*
							代表多个范围在0到9的字符
							如：	
								“”  “0” “22” “666666666666666666666666666666”
	
				?		匹配0个或1个先前字符(模式)
						如：	
							9?
							匹配0个或者1个字符9
							
							“” “9”
							
							[0-9]?
							匹配0个或者1个范围在0到9的字符
							比如：
								"" "1" "2" ..... "9"
	
				{数字}	匹配固定数目的字符
						如：
							9{3}	---> 999
						
							[0-9]{3}	--->	匹配一个三位数
							000	001	002	。。。。999
							
				{最小数目,最大数目}
						匹配至少“最小数目”，至多“最大数目”的先前字符
						
						[0-9]{1,3}
						描述的是1000以内的数字
						
				{最小数目,}
						匹配至少“最小数目”，上不封底的先前字符
						
					
				()		作为一个整体，一个子模式
						如：
							(abc){1,3}
								abc 	abcabc 		abcabcabc
	
				( | )	二选一
						(abc | 123){2}
							abcabc abc123 123abc 123123
		
				转义字符：\
					\ + 元字符  表示元字符本身的那个字符
						\.		代表普通的.
						
						\+		代表普通的+
						
						\\		代表普通的\
						
				
				find 用来在一个目录下递归查找文件
					find ./ -name "[0-9]*"  查找以数字开头的文件
	
	
	
	
	
	
	